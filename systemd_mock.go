// Automatically generated by MockGen. DO NOT EDIT!
// Source: systemd.go

package geard

import (
	dbus "github.com/smarterclayton/go-systemd/dbus"
	gomock "code.google.com/p/gomock/gomock"
)

// Mock of Systemd interface
type MockSystemd struct {
	ctrl     *gomock.Controller
	recorder *_MockSystemdRecorder
}

// Recorder for MockSystemd (not exported)
type _MockSystemdRecorder struct {
	mock *MockSystemd
}

func NewMockSystemd(ctrl *gomock.Controller) *MockSystemd {
	mock := &MockSystemd{ctrl: ctrl}
	mock.recorder = &_MockSystemdRecorder{mock}
	return mock
}

func (_m *MockSystemd) EXPECT() *_MockSystemdRecorder {
	return _m.recorder
}

func (_m *MockSystemd) StartUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "StartUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) StartUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartUnit", arg0, arg1)
}

func (_m *MockSystemd) StopUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "StopUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) StopUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopUnit", arg0, arg1)
}

func (_m *MockSystemd) ReloadUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "ReloadUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) ReloadUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReloadUnit", arg0, arg1)
}

func (_m *MockSystemd) RestartUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "RestartUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) RestartUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RestartUnit", arg0, arg1)
}

func (_m *MockSystemd) TryRestartUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "TryRestartUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) TryRestartUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TryRestartUnit", arg0, arg1)
}

func (_m *MockSystemd) ReloadOrRestartUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "ReloadOrRestartUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) ReloadOrRestartUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReloadOrRestartUnit", arg0, arg1)
}

func (_m *MockSystemd) ReloadOrTryRestartUnit(name string, mode string) (string, error) {
	ret := _m.ctrl.Call(_m, "ReloadOrTryRestartUnit", name, mode)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) ReloadOrTryRestartUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReloadOrTryRestartUnit", arg0, arg1)
}

func (_m *MockSystemd) StartTransientUnit(name string, mode string, properties ...dbus.Property) (string, error) {
	_s := []interface{}{name, mode}
	for _, _x := range properties {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "StartTransientUnit", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) StartTransientUnit(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartTransientUnit", _s...)
}

func (_m *MockSystemd) KillUnit(name string, signal int32) {
	_m.ctrl.Call(_m, "KillUnit", name, signal)
}

func (_mr *_MockSystemdRecorder) KillUnit(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KillUnit", arg0, arg1)
}

func (_m *MockSystemd) GetUnitProperties(unit string) (map[string]interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetUnitProperties", unit)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) GetUnitProperties(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnitProperties", arg0)
}

func (_m *MockSystemd) ListUnits() ([]dbus.UnitStatus, error) {
	ret := _m.ctrl.Call(_m, "ListUnits")
	ret0, _ := ret[0].([]dbus.UnitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockSystemdRecorder) ListUnits() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListUnits")
}

func (_m *MockSystemd) EnableUnitFiles(files []string, runtime bool, force bool) (bool, []dbus.EnableUnitFileChange, error) {
	ret := _m.ctrl.Call(_m, "EnableUnitFiles", files, runtime, force)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]dbus.EnableUnitFileChange)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockSystemdRecorder) EnableUnitFiles(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EnableUnitFiles", arg0, arg1, arg2)
}
